package cn.edu.tsinghua.iginx.it.env.iginx;

import cn.edu.tsinghua.iginx.conf.Config;
import cn.edu.tsinghua.iginx.it.env.ExternalProcessService;
import cn.edu.tsinghua.iginx.it.env.TestEnv;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.io.MoreFiles;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Map;
import java.util.Properties;

public class IGinXService extends ExternalProcessService {

  private static final Logger LOGGER = LoggerFactory.getLogger(IGinXService.class);

  public IGinXService(Path dataDir, Path logFile, Config config) throws IOException {
    super(dataDir, logFile, prepare(dataDir, config));
  }

  static void dump(Path configFile, Config config) throws IOException {
    config.setUdfList(null);
    config.setDefaultUDFDir(null);

    ObjectMapper objectMapper = new ObjectMapper();
    Map<String, Object> map = objectMapper.convertValue(config, Map.class);

    Properties properties = new Properties();
    for (Map.Entry<String, Object> entry : map.entrySet()) {
      String key = entry.getKey();
      Object value = entry.getValue();
      if (value != null) {
        properties.setProperty(key, value.toString());
      }
    }

    LOGGER.info("Dumping to {} with properties: {}", configFile, properties);

    MoreFiles.createParentDirectories(configFile);
    try (OutputStream outputStream = Files.newOutputStream(configFile)) {
      properties.store(outputStream, "IGinX Configuration Generated by IT");
    }
  }

  private static ProcessBuilder prepare(Path dataDir, Config config) throws IOException {
    Path configFile = TestEnv.getWorkspaceRoot().resolve(dataDir).resolve("config.properties").toAbsolutePath();
    dump(configFile, config);

    ProcessBuilder processBuilder = new ProcessBuilder();
    processBuilder.environment().put("IGINX_CONF", configFile.toString());

    if (TestEnv.isUnix()) {
      return processBuilder.command("start_iginx.sh");
    } else if (TestEnv.isWindows()) {
      return processBuilder.command("start_iginx.bat");
    } else {
      throw new UnsupportedOperationException("Unsupported OS: " + TestEnv.getOsName());
    }
  }
}
